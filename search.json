[{"path":"https://docs.ropensci.org/deposits/articles/deposits-R6.html","id":"r6-methods","dir":"Articles","previous_headings":"","what":"R6 methods","title":"The deposits R6 client","text":"R6 package used construct deposits clients allows structured class objects R. objects include elements (variables) methods, R generally functions. new client can constructed new operator, deposits requires specifying service client constructed: Additional functions called similar way, using $-notation, form cli$deposit_function(). deposits package constructed function calls constructed way “automatically” update object , generally need assigned return value. example, function deposits_list() updates list deposits associated service. conventional R packages, calling function require assigning return value like : R6 objects , however, always updated internally, client , cli, already include updated list deposits without need assigning return value cli_updated. , rather line, deposits functions may called simply , (single exception deposit_download_file() function, returns path locally downloaded file, always assigned return value.)","code":"library (deposits) cli <- depositsClient$new (service = \"figshare\") cli_updated <- cli$deposits_list () cli$deposits_list ()"},{"path":"https://docs.ropensci.org/deposits/articles/deposits-R6.html","id":"initialising-a-deposits-client","dir":"Articles","previous_headings":"","what":"Initialising a deposits client","title":"The deposits R6 client","text":"empty client can constructed naming desired service. additional sandbox parameter constructs client zenodo sandbox environment intended testing API. Actual use zenodo API can enabled default sandbox = FALSE.","code":"cli <- depositsClient$new (\"zenodo\", sandbox = TRUE) cli #> <deposits client> #> deposits service : zenodo #>           sandbox: TRUE #>         url_base : https://sandbox.zenodo.org/api/ #> Current deposits : <none> #> #>   hostdata : <none> #>   metadata : <none>"},{"path":"https://docs.ropensci.org/deposits/articles/deposits-R6.html","id":"the-r6-client-structure","dir":"Articles","previous_headings":"","what":"The R6 client structure","title":"The deposits R6 client","text":"R6 clients share build-methods can used understand internal structure functionality. particular, ls() str() functions reveal internal details R6 clients. details nevertheless particularly helpful , deposits client ’s deposits_methods() function intended provide overview implemented methods: described final line output, documentation contains full details methods, also provided online documentation.","code":"cli$deposits_methods () #> List of methods for a deposits client: #> #>    - deposit_add_resource #>    - deposit_delete #>    - deposit_delete_file #>    - deposit_download_file #>    - deposit_embargo #>    - deposit_fill_metadata #>    - deposit_new #>    - deposit_prereserve_doi #>    - deposit_publish #>    - deposit_retrieve #>    - deposit_service #>    - deposit_update #>    - deposit_upload_file #>    - deposit_version #>    - deposits_list #>    - deposits_methods #>    - deposits_search #> #>  see `?depositsClient` for full details of all methods."},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"the-deposits-client","dir":"Articles","previous_headings":"","what":"The deposits client","title":"The deposits package","text":"deposits package uses R6 client interface individual deposition services. separate vignette describes R6 system unfamiliar .","code":""},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"initialising-a-deposits-client","dir":"Articles","previous_headings":"The deposits client","what":"Initialising a deposits client","title":"The deposits package","text":"empty client can constructed naming desired service. additional sandbox parameter constructs client zenodo sandbox environment intended testing API. Actual use zenodo API can enabled default sandbox = FALSE. Client construction requires personal access authentication tokens deposits services stored local environment variables, described installation setup document. Authentication tokens checked new clients constructed, $new() function succeed valid tokens. also described README, methods deposits client can seen deposits_methods() method: methods described detail documentation entry deposits client. methods starting singular “deposit_” prefix operate individual deposits. final 3 methods starting “deposits_” general methods applied services general (“list” “search”), deposits client general (“methods”). main methods, relationships , also illustrated Figure 1.","code":"cli <- depositsClient$new (\"zenodo\", sandbox = TRUE) cli #> <deposits client> #> deposits service : zenodo #>           sandbox: TRUE #>         url_base : https://sandbox.zenodo.org/api/ #> Current deposits : <none> #> #>   hostdata : <none> #>   metadata : <none> cli$deposits_methods () #> List of methods for a deposits client: #> #>    - deposit_add_resource #>    - deposit_delete #>    - deposit_delete_file #>    - deposit_download_file #>    - deposit_embargo #>    - deposit_fill_metadata #>    - deposit_new #>    - deposit_prereserve_doi #>    - deposit_publish #>    - deposit_retrieve #>    - deposit_service #>    - deposit_update #>    - deposit_upload_file #>    - deposit_version #>    - deposits_list #>    - deposits_methods #>    - deposits_search #> #>  see `?depositsClient` for full details of all methods."},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"The deposits package","text":"client constructed mostly empty, nevertheless demonstrates two primary fields elements deposits client, “hostdata” “metadata”. elements represent “metadata” deposit, data referred “files”, can uploaded downloaded. files also accompanying metadata, according “frictionless” workflow described separate “frictionless” vignette. thus three types metadata used deposits workflow: “metadata” describe deposit associated properties, author names affiliations, deposit titles descriptions, dates, keywords, links deposits publications, many terms. kinds metadata described metadata vignette. “frictionless metadata” describe actual contents data deposited. kinds metadata (optionally) generated (always) handled frictionless package. kind metadata described frictionless vignette. “hostdata” provided different formats various deposits services, intended read-data used examine remote records deposit. term “metadata” refers deposits documentation first three kinds, second always explicitly referred “frictionless metadata.” “metadata” “frictionless metadata” structures remain consistent services, allow data transformed one format another, local clients remote services. contrast, hostdata structures directly provided deposits host services, generally lists, different structures different services. structures read-fields automatically filled deposits client, intended provide insight metadata records stored host sites.","code":""},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"passing-metadata-to-a-deposits-client","dir":"Articles","previous_headings":"Metadata","what":"Passing metadata to a deposits client","title":"The deposits package","text":"new deposit initially constructed filling metadata field local representation metadata. several ways , described separate metadata vignette. One easiest approaches define metadata simple list: Note “creator” item list--lists, aspects name may also included, second list required distinguish different creators, described detail metadata vignette. new deposits client can filled metadata passing metadata parameter: summary produced calling print() (, equivalently, just typing cli console) says object now includes three metadata terms. can seen viewing cli$metadata, confirming client metadata precisely specified: Alternative ways specifying entering metadata described metadata vignette, along detailed descriptions kinds metadata accepted deposits client.","code":"metadata <- list (     title = \"New Title\",     abstract = \"This is the abstract\",     creator = list (list (name = \"A. Person\"), list (name = \"B. Person\")) ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : <none> #> #>     hostdata : <none> #>     metadata : 3 terms (see 'metadata' element for details) cli$metadata #> $abstract #> [1] \"This is the abstract\" #>  #> $creator #> $creator[[1]] #> $creator[[1]]$name #> [1] \"A. Person\" #>  #>  #> $creator[[2]] #> $creator[[2]]$name #> [1] \"B. Person\" #>  #>  #>  #> $title #> [1] \"New Title\""},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"creating-a-new-deposit","dir":"Articles","previous_headings":"","what":"Creating a new deposit","title":"The deposits package","text":"filled metadata, deposits client can used initiate new deposit associated external service $deposit_new() method. $deposit_new() method uses existing client create new deposit nominated service, whereas $new() method method creates new client. Calling deposit_new() client constructed sample metadata gives following result: client now lists one current deposit, additional fields URL “id” deposit, “hostdata” field 14 elements. “ID” value printed call deposit_new() listed client “deposit id”. unique integer value used identify particular deposits external services. value can accessed time cli$id. “metadata” item also includes additional “identifier” element containing pre-reserved DOI provided deposits service. point , client always show (least) one deposit. example, return later time new R session initiate new, empty client, see following result: differs initial client now lists one “current deposit”.","code":"cli$deposit_new () #> ID of new deposit: 1064327 print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : 1 (see 'deposits' element for details) #> #>  url_deposit : https://sandbox.zenodo.org/deposit/1064327 #>   deposit id : 1064327 #>     hostdata : list with 14  elements #>     metadata : 4 terms (see 'metadata' element for details) cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : 1 (see 'deposits' element for details) #> #>   hostdata : <none> #>   metadata : <none>"},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"retrieving-deposits","dir":"Articles","previous_headings":"","what":"Retrieving deposits","title":"The deposits package","text":"can examine deposits client get “id” values current deposits. Extending previous example, “id” can accessed : generally, information deposits currently associated user’s account (identified token described installation vignette) can accessed cli$deposits. single deposit show previous steps, first fields result look : can retrieve metadata previously uploaded deposit deposit_retrieve() function: local client holds identical information previous client immediately calling deposit_new() - , retrieve_deposit() filled local client metadata previously-created deposit.","code":"cli$deposits$id #> [1] 1064327 cli$deposits [, 1:5] #>   conceptrecid             created                    doi #> 1      1200932 2023-00-01T00:00:00 10.5072/zenodo.1064327 #>                                  doi_url      id #> 1 https://doi.org/10.5072/zenodo.1064327 1064327 cli$deposit_retrieve (deposit_id = cli$deposits$id [1])"},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"uploading-files-to-deposits","dir":"Articles","previous_headings":"","what":"Uploading files to deposits","title":"The deposits package","text":"previous sections document describe initiate deposits client, use initiate retrieve metadata remote deposits services. main point deposit course store actual data arbitrary format alongside structured metadata. achieved deposit_upload_file() method, demonstrated following code uses deposit retrieved directly . recommended store data single deposit within single directory, following code also creates. client holds additional information appears typing print(cli), just cli: client now holds local_path field identifying directory active deposit, lists numbers local remote resources. details remote resources contained hostdata$files element (previously empty): list files includes “datapackage.json” file generated frictionless package. file counted “resources”. described main README, length separate “frictionless” vignette, “datapackage.json” file contains metadata entered deposits client, well “frictionless metadata” describing internal properties dataset . Files can downloaded deposit_download_file function. demonstrate works, following code first removes local version, downloads remote service confirms local version successfully re-created.","code":"data_dir <- file.path (tempdir (), \"data\") dir.create (data_dir) path <- file.path (data_dir, \"data.csv\") write.csv (datasets::Orange, path, row.names = FALSE) cli$deposit_upload_file (path = path) #> frictionless metadata file has been generated as '/tmp/RtmpxSiYhW/data/datapackage.json' print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : 1 (see 'deposits' element for details) #> #>  url_deposit : https://sandbox.zenodo.org/deposit/1064327 #>   deposit id : 1064327 #>     hostdata : list with 14  elements #>     metadata : 4 terms (see 'metadata' element for details) #>   local_path : /tmp/RtmpxSiYhW/data #>    resources : 1 local, 1 remote cli$hostdata$files #>                           checksum         filename filesize                                   id #> 1 cc624d72ede85ef061afa494d9951f6f         data.csv      625 56c44dd6-5f84-4212-9a65-d37f64ca886f #> 2 eaeb7c4f8a931c99e662172299a0b17f datapackage.json      812 32d556ef-5b65-4b9d-a8a8-2e7bed11da5d #>                                                                               links.download #> 1         https://sandbox.zenodo.org/api/files/561f4971-9e86-4235-b574-f5662f6088e3/data.csv #> 2 https://sandbox.zenodo.org/api/files/561f4971-9e86-4235-b574-f5662f6088e3/datapackage.json #>                                                                                              links.self #> 1 https://sandbox.zenodo.org/api/deposit/depositions/1161632/files/56c44dd6-5f84-4212-9a65-d37f64ca886f #> 2 https://sandbox.zenodo.org/api/deposit/depositions/1161632/files/32d556ef-5b65-4b9d-a8a8-2e7bed11da5d file.remove (path) file <- cli$deposit_download_file (filename = \"data.csv\", path = data_dir) file #> [1] /tmp/RtmpcO59N8/data/data.csv"},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"pre-generating-frictionless-metadata-files-prior-to-upload","dir":"Articles","previous_headings":"Uploading files to deposits","what":"Pre-generating frictionless metadata files prior to upload","title":"The deposits package","text":"workflow described preceding section results frictionless metadata file simultaneously generated, filled deposits metadata, uploaded nominated service. described detail “frictionless” vignette. alternative workflow allows frictionless metadata files generated locally prior uploading. uses deposits_add_resource() method, “resource” local data file object. initiating client metadata, demonstrated : frictionless metadata file stored locally can generated following call, specifying path local file. client list additional local_path, demonstrated , case list resources: 1 local, 0 remote, resource yet uploaded remote service. local_path directory containing specified file also additional “datapackage.json” file including deposits metadata used client construction. file may edited desired prior uploading. update deposits client changes external metadata files, simply pass path file deposits_fill_metadata() method. ready, single call deposit_upload_file() function upload file specified call, along frictionless “datapackage.json” metadata file.","code":"cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE, metadata = metadata) cli$deposit_add_resource (path = path)"},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"editing-and-updating-deposits","dir":"Articles","previous_headings":"","what":"Editing and updating deposits","title":"The deposits package","text":"deposits initiated nominated services “private” deposits, meaning: can viewed deposit owner; can freely edited, including complete deletion. deposit can publicly viewed published, described final section vignette. process using deposits prepare one datasets publication generally involve multiple stages editing updating. deposits client filled metadata connected local_path, demonstrated , local files may edited, including frictionless “datapackage.json” file. client deposit held remote server may updated calling deposit_update() method. changes “metadata” field “datapackage.json” file reflected “metadata” field deposits client, well metadata passed remote service. modified files, including “datapackage.json”, also uploaded remote service, -writing previous versions. Note local files must first individually uploaded deposit_upload_file() method deposit_update() method can used update . Moreover, calling deposit_update() files held local_path directory uploaded generally produce error noting files must first uploaded prior calling deposit_update().","code":""},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example workflow","title":"The deposits package","text":"example full workflow creating editing deposits client associated metadata look something like following five main steps: Initiate local deposits client metadata: Upload local data, following code simulates creating “dummy” dataset temporary directory current R session: following call uploads dataset newly-created deposit: Calling deposit_upload_file() first time also creates local remote versions frictionless “datapackage.json” file, holding metadata, DOI new deposit. Uploading files also automatically generates local_path field deposits client, enabling numbers local remote resources counted shown printing client. Modify metadata. following code provides proof--principle modification metadata, changing “New Title” “Updated Title”: indirect way editing metadata, using R code. recommended way update deposits metadata directly edit modify “datapackage.json” file. Update local client remote deposit data, noting local_path variable held client , need passed update method. Local modifications reflected updated “metadata” deposits client, well “hostdata” stored Zenodo service.","code":"metadata <- list (     title = \"New Title\",     abstract = \"This is the abstract\",     creator = list (list (name = \"A. Person\"), list (name = \"B. Person\")) ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) cli$deposit_new () #> ID of new deposit: 1064327 data_dir <- file.path (tempdir (), \"data\") dir.create (data_dir) path <- file.path (data_dir, \"data.csv\") write.csv (datasets::Orange, path, row.names = FALSE) cli$deposit_upload_file (path = path) fr <- file.path (data_dir, \"datapackage.json\") dp <- frictionless::read_package (fr) dp$metadata$title #> [1] \"New Title\" dp$metadata$title <- \"Updated Title\" frictionless::write_package (dp, data_dir) cli$deposit_update () #> Local file at [/tmp/RtmpBM0VYr/data/data.csv] is identical on host and will not be uploaded. #> Local file at [/tmp/RtmpBM0VYr/data/datapackage.json] has changed and will now be uploaded. cli$metadata$title #> [1] \"Updated Title\" cli$hostdata$title #> [1] \"Updated Title\""},{"path":"https://docs.ropensci.org/deposits/articles/deposits.html","id":"publishing-a-deposit","dir":"Articles","previous_headings":"","what":"Publishing a deposit","title":"The deposits package","text":"metadata data satisfactorily edited, updated, uploaded, deposit can made publicly visible permanently associated Digital Object Identifier (DOI) publishing . Prior publishing, often desired apply “embargo” deposit, form date deposit become publicly visible. two steps publication thus generally: Calling deposit_publish() method irreversible, can never undone. (Publication permanent even Zenodo sandbox environment.) published deposit permanently associated account user published , identified API token used initiate deposits client. Publication also change many items client’s “hostdata”, notably involving change status visibility “private” “public”. deposit published, associated DOI, equivalent URL given deposits client, may shared permanent link deposit.","code":"cli$deposit_embargo (embargo_date = \"2030-03-30\") cli$deposit_publish ()"},{"path":"https://docs.ropensci.org/deposits/articles/frictionless.html","id":"generating-datapackage-json-files","dir":"Articles","previous_headings":"","what":"Generating “datapackage.json” files","title":"frictionless workflows with deposits","text":"deposits package uses frictionless R package automatically generate frictionless metadata files named “datapackage.json” tabular input data. files can generated one input data sets, can generated deposits metadata without accompanying data files resources. following code repeated main vignette, generates local data file tabular data empty directory. need construct deposits client, specify metadata, case describing beaver1 dataset. format metadata explained length metadata vignette.","code":"dir.create (file.path (tempdir (), \"data\")) path <- file.path (tempdir (), \"data\", \"beaver1.csv\") write.csv (datasets::beaver1, path, row.names = FALSE) metadata <- list (     creator = list (list (name = \"P. S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver' dataset.\" ) cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE, metadata = metadata)"},{"path":"https://docs.ropensci.org/deposits/articles/frictionless.html","id":"generation-by-uploading-files","dir":"Articles","previous_headings":"Generating “datapackage.json” files","what":"Generation by uploading files","title":"frictionless workflows with deposits","text":"main vignette demonstrates use metadata initiate new deposit Zenodo sandbox service, upload local data. Calling deposit_upload_file() method automatically generates “datapackage.json” file (one already exist), adds deposits metadata, also uploads file deposits service. client lists two files uploaded, local directory also now “datapackage.json” file: deposits package inserts additional “metadata” field frictionless metadata file, containing deposits metadata defined . method generating frictionless metadata files requires data first uploaded service, automatically upload frictionless metadata file. subsequent editing requires repeated calls deposit_upload_file() method update contents file.","code":"cli$deposit_new () #> ID of new deposit : 1162420 cli$deposit_upload_file (path = path) #> frictionless metadata file has been generated as '/tmp/RtmpvRre5Z/data/datapackage.json' cli$hostdata$files$filename #> [1] \"beaver1.csv\"      \"datapackage.json\" list.files (file.path (tempdir (), \"data\")) #> [1] \"beaver1.csv\"      \"datapackage.json\""},{"path":"https://docs.ropensci.org/deposits/articles/frictionless.html","id":"local-generation","dir":"Articles","previous_headings":"Generating “datapackage.json” files","what":"Local generation","title":"frictionless workflows with deposits","text":"frictionless metadata file can also first generated locally, allow editing prior uploading. achieved deposit_add_resource() method. mentioned, frictionless workflow requires data “resource” exist. resource example locally-stored “beaver.csv” file. Presuming file exist, can initiate deposit, call deposit_add_resource(), instead deposit_upload_file(). call generate local frictionless metadata file (one already exist), fill deposits metadata, without initiating new deposit uploading files. Whether generated immediately uploading calling deposit_upload_file(), locally generated calling deposit_add_resource(), frictionless data file can edited updated described following sub-section. Note calling either methods connects client local directory containing “datapackage.json” file data files. Printing client produces additional information including local_path identifying directory, along counts local remote “resources” files.","code":"cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE, metadata = metadata) cli$deposit_add_resource (path = path)"},{"path":"https://docs.ropensci.org/deposits/articles/frictionless.html","id":"reading-and-editing-datapackage-json-files","dir":"Articles","previous_headings":"","what":"Reading and editing “datapackage.json” files","title":"frictionless workflows with deposits","text":"“datapackage.json” file can read frictionless::read_package() function, returning named list metadata entries: “profile”, “resources”, “directory” items generated frictionless, “metadata” items holds deposits metadata entered : frictionless aspects metadata default automatically generated package, generally benefit kind editing enhancing described main frictionless vignette, including things adding descriptions variables. deposits-specific “metadata” component can also readily extended edited desired. data files can edited two primary ways, either: Editing individual list items R, saving result via frictionless::write_package(); , Directly editing “datapackage.json” text editor. recommend second method, enables simplest overview entire metadata structure given deposit. frictionless “datapackage.json” file generated deposit, recommended deposits workflow editing updating metadata done directly editing file, explained metadata vignette.","code":"library (frictionless) path <- file.path (tempdir (), \"data\", \"datapackage.json\") metadata <- read_package (path) names (metadata) #> [1] \"profile\"   \"metadata\"  \"resources\" \"directory\" metadata$metadata #> $created #> [1] \"1994-01-01T00:00:00\" #> #> $creator #> $creator[[1]] #> $creator[[1]]$name #> [1] \"P. S. Reynolds\" #> #> $description #> [1] \"Original source of 'beaver' dataset.\" #> #> $title #> [1] \"Time-series analyses of beaver body temperatures\""},{"path":"https://docs.ropensci.org/deposits/articles/frictionless.html","id":"updating-datapackage-json-on-deposits-service","dir":"Articles","previous_headings":"","what":"Updating “datapackage.json” on deposits service","title":"frictionless workflows with deposits","text":"changes local “datapackage.json” file can imported deposits client deposit_update() method, also update remote version “datapackage.json” file held deposits service. initial deposit_upload_file() deposit_add_resource() methods connected client local directory containing deposit data, update method can called directly without parameters. Specific paths can nevertheless passed deposit_update() method, update specified files ignoring changes files. example, path argument can specify path single “datapackage.json” file, case file uploaded, regardless local modifications files. Calling method update “metadata” “hostdata” elements deposits client reflect changes made “datapackage.json” file, also update remote version file, indicated messages produced calling method.","code":"cli$deposit_update () #> Local file at [/tmp/Rtmp5QfAEc/data/beaver1.csv] is identical on host and will not be uploaded. #> Local file at [/tmp/Rtmp5QfAEc/data/datapackage.json] has changed and will now be uploaded."},{"path":"https://docs.ropensci.org/deposits/articles/install-setup.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installation and Setup","text":"package can installed enabling “ropensci” r-universe, using install.packages(): Alternatively, package can installed directly GitHub following command: package can loaded use :","code":"options (repos = c (     ropensci = \"https://ropensci.r-universe.dev\",     CRAN = \"https://cloud.r-project.org\" )) install.packages (\"deposits\") remotes::install_github (\"ropenscilabs/deposits\") library (deposits)"},{"path":"https://docs.ropensci.org/deposits/articles/install-setup.html","id":"setup-api-tokens","dir":"Articles","previous_headings":"","what":"Setup: API Tokens","title":"Installation and Setup","text":"services require users create account generate API (“Application Programming Interface”) tokens. Click following links generate tokens, also listed sequences menu items used reach token settings: zenodo/account/settings/applications/tokens/new zenodo-sandbox/account/settings/applications/tokens/new, figshare/account/applications. necessary create register applications services; package uses personal tokens . tokens need stored local environment variables names must include names respective services, defined “name” column returned deposits_service(), shown . can done following example: Alternatively, tokens can stored ~/.Renviron file, automatically loaded every R session.","code":"Sys.setenv (\"ZENODO_SANDBOX_TOKEN\" = \"<my-token\")"},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"dublin-core-metadata","dir":"Articles","previous_headings":"","what":"Dublin Core Metadata","title":"deposits metadata","text":"metadata structure used deposits follows specifications Dublin Core Metadata Initiative. Users need understand read documents DCMI structure, implementation explicitly contained within package’s “dc/schema.json” file. file document needed understand metadata compliance deposits. may nevertheless instructive examine DCMI specifications, order understand individual terms broader context.","code":""},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"metadata-validation","dir":"Articles","previous_headings":"","what":"Metadata Validation","title":"deposits metadata","text":"Metadata deposits validated JSON schemas, schema main “metadata” field contained package’s “dc/schema.json” file. schema file includes detailed specifications every metadata term used deposits. list terms can also viewed directly dcmi_terms() function. validation procedure intended issue instructive errors throughout metadata conform expected format, vignette demonstrating several error messages. Let’s start minimal version metadata list shown , try validate using deposit_fill_metadata() method: error tells us “author” additional property, metadata “must additional properties.” “additional properties” refer beyond specified schema. schema used validate deposits metadata contained package’s dc/schema.json file. copy file included installation package location given , Searching “author” either GitHub version local file quickly reveal author information belongs field called “creator”. Renaming metadata item gives, first messages say “creator” property “must array”. Arrays JSON list objects R, suggests next required modification: items within “creator” field must now type “object.” R relatively simply language , “objects” also lists, leading us : generates error. Looking bit error output reveals object “required” property “name”. generally, instances error messages helpful, useful refer actual JSON schema (local version). “creator” field expected Zenodo service can seen accept properties, “name”, “affiliation”, “orcid”, “gnd”, “name” property required, indicated error message. error seems indicate “creator” field valid, yet triggers error metadata “must required property ‘description’”. Let’s add : now works, although capture full metadata shown ?beaver1. still need information publisher. Examining JSON schema shows includes “publisher” field expected string. may wish specify date resource created. Searching “date” schema reveals “date” field, intended describe, “point period time associated event lifecycle resource.” various “date” fields, one want pretty clearly “created” field, expected string either “date” “date-time” format. Let’s try simple “date”: fails “created” must match format “date-time”, even though main JSON schema clearly indicates either date date-time strings acceptable. error reflects fact validation deposits metadata two-stage process. metadata first validated general JSON schema described , converted formats expected nominated deposits service, result validated service-specific JSON schema. case, Zenodo service requires “created” fields “date-time”, “date”, format. metadata finally valid format Zenodo service. instructive exercise change service “figshare”, use resultant error messages tweak metadata expected format Figshare deposit.","code":"metadata <- list (     author = \"P.S. Reynolds\",     title = \"Time-series analyses of beaver body temperatures.\" ) cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) cli$deposit_fill_metadata (metadata) #>   instancePath             schemaPath              keyword additionalProperty #> 1              #/additionalProperties additionalProperties             author #>                               message #> 1 must NOT have additional properties #> Error: Stopping because the DCMI metadata terms listed above do not conform with the expected schema. system.file (fs::path (\"extdata\", \"dc\", \"schema.json\"), package = \"deposits\") #> [1] \"/usr/local/lib/R/site-library/deposits/extdata/dc/schema.json\" metadata <- list (     creator = \"P.S. Reynolds\",     title = \"Time-series analyses of beaver body temperatures.\" ) cli$deposit_fill_metadata (metadata) #>   instancePath                        schemaPath keyword  type #> 1     /creator #/properties/creator/anyOf/0/type    type array #> 2     /creator #/properties/creator/anyOf/1/type    type array #> 3     /creator        #/properties/creator/anyOf   anyOf  <NA> #>                        message required #> 1                must be array     name #> 2                must be array     name #> 3 must match a schema in anyOf     <NA> #> Error: Stopping because the DCMI metadata terms listed above do not conform with the expected schema. metadata <- list (     creator = list (\"P.S. Reynolds\"),     title = \"Time-series analyses of beaver body temperatures.\" ) cli$deposit_fill_metadata (metadata) #>   instancePath                              schemaPath keyword   type #> 1   /creator/0 #/properties/creator/anyOf/0/items/type    type object #> 2   /creator/0 #/properties/creator/anyOf/1/items/type    type object #> 3     /creator              #/properties/creator/anyOf   anyOf   <NA> #>                        message required #> 1               must be object     name #> 2               must be object     name #> 3 must match a schema in anyOf     <NA> #> Error: Stopping because the DCMI metadata terms listed above do not conform with the expected schema. metadata <- list (     creator = list (list (\"P.S. Reynolds\")),     title = \"Time-series analyses of beaver body temperatures.\" ) cli$deposit_fill_metadata (metadata) #>   instancePath                              schemaPath keyword   type #> 1   /creator/0 #/properties/creator/anyOf/0/items/type    type object #> 2   /creator/0 #/properties/creator/anyOf/1/items/type    type object #> 3     /creator              #/properties/creator/anyOf   anyOf   <NA> #>                        message required #> 1               must be object     name #> 2               must be object     name #> 3 must match a schema in anyOf     <NA> #> Error: Stopping because the DCMI metadata terms listed above do not conform with the expected schema. metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     title = \"Time-series analyses of beaver body temperatures.\" ) cli$deposit_fill_metadata (metadata) #>   instancePath                     schemaPath  keyword missingProperty #> 1    /metadata #/properties/metadata/required required     description #>                                     message #> 1 must have required property 'description' #> Error: Stopping because the metadata terms listed above do not conform with the expected schema for the zenodo service. metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\" ) cli$deposit_fill_metadata (metadata) metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\" ) cli$deposit_fill_metadata (metadata) metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\" ) cli$deposit_fill_metadata (metadata) #>   instancePath                  schemaPath keyword    format #> 1     /created #/properties/created/format  format date-time #>                         message #> 1 must match format \"date-time\" #> Error: Stopping because the metadata terms listed above do not conform with the expected schema for the zenodo service. metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\" ) cli$deposit_fill_metadata (metadata)"},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"metadata-to-specify-connections-between-deposits","dir":"Articles","previous_headings":"Metadata Validation","what":"Metadata to specify connections between deposits","title":"deposits metadata","text":"schema permits many fields, importantly including fields intended used deposits package document identify connections different data resources. include “hasPart”, “hasVersion”, “isPartOf”, “isReferencedBy”, “isReplacedBy”, “isRequiredBy”, “isVersionOf”. Specifying allows one deposit connected others. One aims deposits package facilitate specification kinds metadata, enhance ability inter-connect inter-relate different data depositions, providing insight growing ecosystem inter-connected deposits. “” “” metadata fields complex structures, JSON schemas can used understand expected format. isPartOf field Zenodo expected array (R terms, list) objects, must “identifier” “relation”, may also “resource_type”. metadata successfully validated, attempting create deposit Zenodo trigger error, “identifier” must conform expected type. JSON schema always considered definitive reference, states “identifier” : “Supported identifiers include: DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs URLs.” “Case Studies Biometry” book “ARK” identifier can used , Examining JSON schema also reveals “isPartOf” allows one additional field “resource_type”, upload, publication, image type followed type specification. type specifications included second JSON schema used validate Zenodo-specific metadata. GitHub version can seen , location locally-installed version found , schema reveals accepted types “publication” include “book”, “resource_type” becomes “publication-book”: Finally can confirm metadata format accepted specific Zenodo service creating new deposit: deposit successfully created, Zenodo record populated appropriately-translated versions metadata.","code":"metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\",     isPartOf = list (list (         identifier = \"Case Studies in Biometry\",         relation = \"isPartOf\"     )) ) cli$deposit_fill_metadata (metadata) metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\",     isPartOf = list (list (         identifier = \"ark:/13960/t0mt2n370\",         relation = \"isPartOf\"     )) ) cli$deposit_fill_metadata (metadata) system.file (fs::path (\"extdata\", \"zenodo\", \"schema.json\"), package = \"deposits\") #> [1] \"/usr/local/lib/R/site-library/deposits/extdata/zenodo/schema.json\" metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\",     isPartOf = list (list (         identifier = \"ark:/13960/t0mt2n370\",         relation = \"isPartOf\",         resource_type = \"publication-book\"     )) ) cli$deposit_fill_metadata (metadata) cli$deposit_new () #> ID of new deposit : 1186243 print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : 1 (see 'deposits' element for details) #> #>  url_service : https://sandbox.zenodo.org/deposit/1186243 #>   deposit id : 1186243 #>     hostdata : list with 14  elements #>     metadata : 6 terms (see 'metadata' element for details)"},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"metadata-templates","dir":"Articles","previous_headings":"","what":"Metadata templates","title":"deposits metadata","text":"alternative way enter metadata deposits client via local JSON metadata file. depostis includes function, deposits_metadata_template(), generates local version complete template allowed metadata fields. Note deposits workflows generally expected use metadata templates defined part “frictionless” workflow, described detail accompanying frictionless vignette. deposits_metadata_template() intended demonstration purposes, full frictionless template generally preferred. format deposits metadata nevertheless remains . command issues important note, given even detail first line resultant template: version template modified reflect metadata defined look like : format item within JSON object matches specifications main dc/schema.json file. Note schema expects “creator” “isPartOf” fields Zenodo type “array”. Arrays JSON defined square brackets, [ ... array contents ...]. arrays expected items type “object”, JSON defined curly brackets, { ... object contents ...}. two key aspects JSON specification required understand use metadata templates deposits: JSON “array” defined within square brackets, may contain number items: [ ... array ...]. JSON “object” defined within curly brackets, must generally follow defined structure: { ... object ...}. “array” “object” items JSON represented R terms lists, array objects simply becomes list(list(...)), demonstrated first second vignette. (means objects composed arrays cause confusion, relatively uncommon, used JSON schemas within deposits package.)","code":"f <- fs::file_temp (ext = \".json\") deposits_metadata_template (filename = f) #> Edit the file [/tmp/Rtmpiaoffm/file70126117500.json] and remove everything except the metadata fields you require. #> The filename may be then passed as the 'metadata' argument to a 'deposits' client. head (readLines (f), 2L) [2] #> [1] \"  \\\"_note\\\": \\\"Fields like this starting with underscores are comments. Please delete this field, and all fields in this template except for those you wish to use for your deposit. This template may NOT be used in anything like this default form to construct a 'deposits' client. Many values require editing to comply with expected formats described throughout, such as dates or fields expected to accord with some fixed vocabulary, or modification from text descriptions to JSON objects. Please refer to the main 'dc/schema' file of the 'deposits' package for full details.\\\",\" #> { #>   \"created\": \"1994-01-01T00:00:00\", #>   \"creator\": [ #>     { #>       \"name\": \"P.S. Reynolds\" #>     } #>   ], #>   \"description\": \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\", #>   \"isPartOf\": [ #>     { #>       \"identifier\": \"ark:/13960/t0mt2n370\", #>       \"relation\": \"isPartOf\", #>       \"resource_type\": \"publication-book\" #>     } #>   ], #>   \"publisher\": \"John Wiley and Sons\", #>   \"title\": \"Time-series analyses of beaver body temperatures.\" #> }"},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"valid-json-files","dir":"Articles","previous_headings":"Metadata templates","what":"Valid JSON Files","title":"deposits metadata","text":"schema “creator” field shown requires (Zenodo) “array” items, “object” must include “name” field, may include additional fields “affiliation”, “orcid”, “gnd”. example JSON specification “creator” thus : “creator” “array”, may contain multiple unnamed items. contrast, items within “object” must generally named, schemas generally expect single instances item within “object.” Switching square curly brackets definition invalidate JSON file, trigger error deposits. Errors validation JSON files , however, nowhere near informative errors arising comparing JSON files schemas. JSON file invalid, errors shown deposits generally uninformative. therefore important ensure JSON metadata files formatted valid way. easiest way check validity passing metadata file deposits client use validate() function jsonlite package. function requires string input, called jsonlite::validate(readLines(\"metadata.json\")). example demonstrates one important aspect hand-writing JSON files, commas. Commas must used separate sequential fields, must placed end individual sequence fields. first statement means valid JSON requires commas like : specification without comma valid. second statement means placing comma second \"value2\" statement also render JSON invalid. Note commas equally important separating JSON objects: specification requires single comma separating two objects. Placing commas anywhere else, values, end “object2”, invalidate JSON.","code":"{   \"creator\": [     {       \"name\": \"A. Person\",       \"orcid\": \"0000-0001-0002-0003\"     },     {       \"name\": \"B. Person\"     }   ] } {   \"field1\": \"value1\",   \"field2\": \"value2\" } {   \"object1\": {     \"field\": \"value\"   },   \"object2\": {     \"field\": \"value\"   } }"},{"path":"https://docs.ropensci.org/deposits/articles/metadata.html","id":"metadata-and-the-deposits-frictionless-workflow","dir":"Articles","previous_headings":"","what":"Metadata and the deposits frictionless workflow","title":"deposits metadata","text":"described detail “frictionless” vignette, deposits designed work seamlessly “frictionless” workflow, via rOpenSci’s “frictionless” R package. metadata, means soon data resource uploaded service (deposit_upload_file() method), “datapackage.json” file automatically created filled descriptions uploaded file, “resource” frictionless terms, well metadata described vignette. point onward, metadata can edited directly “datapackage.json” file, local client external deposit can always updated time local data modified deposit_update() method. conclusion: moment deposit “datapackage.json” file, considered definitive record metadata. changes may wish make metadata made directly editing file, deposits update corresponding local remote records. restarting R session, deposits client can connected local deposit passing path local directory containing deposit data “datapackage.json” file “metadata” parameter new() method: Equivalently, start empty deposits client, fill metadata deposit_fill_metadata() method: resultant client fill “metadata” field contents “datapackage.json” file. deposit also exists remotely, local changes “datapackage.json” reflected changes remote deposits service, including changes within copy “datapackage.json” held .","code":"cli <- depositsClient$new (     service = \"<service>\",     metadata = \"/<local>/<directory>/<or>/<frictionless_file>\" ) cli <- depositsClient$new (service = \"<service>\") path <- \"/<local>/<directory>/<or>/<frictionless_file>\" cli$deposit_fill_metadata (metadata = path)"},{"path":"https://docs.ropensci.org/deposits/articles/versioning.html","id":"explicit-version-control","dir":"Articles","previous_headings":"","what":"Explicit version control","title":"Publication and versioning","text":"Zenodo offers explicit control versioning, enabling aspects including version numbers deposits, specified updated desired. vignette presumes copy published deposit also exists locally, aspects data /metadata local version updated, differ published version. first step retrieve published version, fill client updated metadata. done passing local path directory containing deposit deposit_fill_metadata() method method. code also uses Zenodo “sandbox” environment trial functions without publication Zenodo . new version can created calling: client reveal different, updated deposit ID value corresponding URL. Clicking (copying web browser) open page “edit” mode, containing updated metadata fields. new version can published deposit_publish() method. primary URL deposit resolve latest published version. Versions can edited updated described main workflow vignettes, using deposit_update() method. Versions created deposit_version() method remain private published. versions may also cancelled deleted calling cli$deposit_delete().","code":"library (deposits) cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) my_id <- cli$deposits$id [1] # select deposit to retreive cli$deposit_retrieve (my_id) # path <- \"/<local>/<path>/<to>/<deposit>/\" path <- \"/data/mega/code/repos/pre-processing-r/typetracer\" cli$deposit_fill_metadata (path) cli$deposit_version ()"},{"path":"https://docs.ropensci.org/deposits/articles/versioning.html","id":"services-without-explicit-version-control","dir":"Articles","previous_headings":"","what":"Services without explicit version control","title":"Publication and versioning","text":"Figshare offer explicit control versions. Instead, deposit may edited time. Re-publishing edited deposit increments internal version number, 1 2 first version, increments subsequent versions. deposit_version() method described applies service explicit version control. New versions Figshare may created deposits updating metadata (example, using deposit_fill_metadata() method demonstrated , calling two methods: difference workflow Zenodo deposit_update() method called instead deposit_version() method. updates created deposit_update() method private published. updates may also cancelled deleted calling cli$deposit_delete().","code":"cli$deposit_update () cli$deposit_publish ()"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"initial-metadata","dir":"Articles","previous_headings":"","what":"Initial Metadata","title":"Example deposits workflow","text":"described metadata vignette, deposits start metadata describing general aspects data deposited, title, description, identification creators, aspects specified deposits metadata JSON schema. workflow use “beaver” datasets metadata vignette, R’s “datasets” package. vignette demonstrated use error messages triggered incorrectly specified metadata work towards following, schema-compliant specification: “isPartOf” element key part “deposits” metadata, enabling individual data sources systematically related resources, case book first describing data associated “ark” identifier. fields intended help linking data depositions project outcomes, publications, data sets, general project descriptions. Fields purposes include “hasPart”, “hasVersion”, “isPartOf”, “isReferencedBy”, “isReplacedBy”, “isRequiredBy”, “isVersionOf”, details fields given deposits JSON schema. metadata can used initiate deposits client new() method, demonstrated sandbox = TRUE use Zenodo “sandbox” environment. metadata can edited extended desired. metadata recorded deposits client can updated edit deposit_fill_metadata() method: always possible edit deposits metadata directly passing values deposit_fill_metadata() method, recommended procedure generate “frictionless” metadata file, described vignette name, edit metadata directly file. procedure demonstrated following section. frictionless metadata file can initially generated response actual data resource, thus next section begins generating example data.","code":"metadata <- list (     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     title = \"Time-series analyses of beaver body temperatures.\",     description = \"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\",     publisher = \"John Wiley and Sons\",     isPartOf = list (list (         identifier = \"ark:/13960/t0mt2n370\",         relation = \"isPartOf\"     )) ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) print (cli) #> <deposits client> #> deposits service : zenodo #>           sandbox: TRUE #>         url_base : https://sandbox.zenodo.org/api/ #> Current deposits : <none> #> #>   hostdata : <none> #>   metadata : 6 terms (see 'metadata' element for details) cli$deposit_fill_metadata (metadata)"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"preparing-data-sources","dir":"Articles","previous_headings":"","what":"Preparing data sources","title":"Example deposits workflow","text":"“beaver” data actually comprises two datasets, “beaver1” “beaver2”, time series body temperature measurements individual beaver. data sources uploaded deposits, must first exist local computer, meaning case copies beaver datasets must first written local files. deposits package presumes single deposits lives within dedicated local directory includes associated files. Let’s start making temporary directory storing “beaver” data : can connect deposits client local directory deposit_add_resource() method: Printing client, typing print(cli), simply cli, reveals connected local directory holding data:","code":"beaver_dir <- file.path (tempdir (), \"beaver\") if (!dir.exists (beaver_dir)) {     dir.create (beaver_dir) } bv1 <- file.path (beaver_dir, \"beaver1.csv\") write.csv (datasets::beaver1, bv1, row.names = FALSE) bv2 <- file.path (beaver_dir, \"beaver2.csv\") write.csv (datasets::beaver1, bv2, row.names = FALSE) cli$deposit_add_resource (beaver_dir) print (cli) #> <deposits client> #> deposits service : zenodo #>           sandbox: TRUE #>         url_base : https://sandbox.zenodo.org/api/ #> Current deposits : <none> #> #>   hostdata : <none> #>   metadata : 6 terms (see 'metadata' element for details) #> local_path : /tmp/RtmpPru5st/beaver #>  resources : 2 local, 0 remote"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"frictionless-metadata","dir":"Articles","previous_headings":"Preparing data sources","what":"Frictionless metadata","title":"Example deposits workflow","text":"Calling deposit_add_resource() method: first time also writes “frictionless” metadata file local_path directory: additional “datapackage.json” file initially generated “frictionless” R package, automatically fills details “resource”, local file, “resources” section. deposits package inserts metadata specified additional “metadata” section file. following code illustrates portion contents file: frictionless “datapackage.json” file generated, subsequent editing metadata done directly editing file. Editing also generally involve extending automatically-inserted “resource” metadata describing structure actual files, described documentation frictionless R package. Edited updated versions metadata can loaded deposits client passing path directory path argument deposit_update() method. Instead beaver_dir, full path local “datapackage.json” file can also passed. effect can achieved calling deposit_fill_metadata() method deposits initiated remote service, deposit_update() method additional effects point, recommended method “datapackage.json” file generated. demonstrated subsequent section. following code demonstrates modification updating metadata first modifying “title”, showing changes reflected client : short, metadata editing deposits generally done editing local “datapackage.json” file, deposits client can updated deposit_update() method.","code":"list.files (beaver_dir) #> [1] \"beaver1.csv\"      \"beaver2.csv\"      \"datapackage.json\" dp <- list.files (beaver_dir, pattern = \"datapackage\", full.names = TRUE) readLines (dp) [1:25] #>  [1] \"{\" #>  [2] \"  \\\"profile\\\": \\\"tabular-data-package\\\",\" #>  [3] \"  \\\"metadata\\\": {\" #>  [4] \"    \\\"created\\\": \\\"1994-01-01T00:00:00\\\",\" #>  [5] \"    \\\"creator\\\": [\" #>  [6] \"      {\" #>  [7] \"        \\\"name\\\": \\\"P.S. Reynolds\\\"\" #>  [8] \"      }\" #>  [9] \"    ],\" #> [10] \"    \\\"description\\\": \\\"Original source of 'beaver' data, in Chapter 11 of  Lange, N., Ryan, L., Billard, L., Brillinger, D., Conquest, L. and Greenhouse, J. eds (1994) Case Studies in Biometry.\\\",\" #> [11] \"    \\\"isPartOf\\\": [\" #> [12] \"      {\" #> [13] \"        \\\"identifier\\\": \\\"ark:/13960/t0mt2n370\\\",\" #> [14] \"        \\\"relation\\\": \\\"isPartOf\\\"\" #> [15] \"      }\" #> [16] \"    ],\" #> [17] \"    \\\"publisher\\\": \\\"John Wiley and Sons\\\",\" #> [18] \"    \\\"title\\\": \\\"Time-series analyses of beaver body temperatures.\\\"\" #> [19] \"  },\" #> [20] \"  \\\"resources\\\": [\" #> [21] \"    {\" #> [22] \"      \\\"name\\\": \\\"beaver1\\\",\" #> [23] \"      \\\"path\\\": \\\"beaver1.csv\\\",\" #> [24] \"      \\\"profile\\\": \\\"tabular-data-resource\\\",\" #> [25] \"      \\\"format\\\": \\\"csv\\\",\" cli$deposit_update (beaver_dir) m <- readLines (dp) i <- grep (\"\\\"title\\\"\", m) m [i] <- gsub (\"Time\", \"Modified time\", m [i]) writeLines (m, dp)  cli$metadata$title # original title #> [1] \"Time-series analyses of beaver body temperatures.\" cli$deposit_update (beaver_dir) cli$metadata$title #> [1] \"Modified time-series analyses of beaver body temperatures.\""},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"initiating-a-remote-deposit","dir":"Articles","previous_headings":"","what":"Initiating a remote deposit","title":"Example deposits workflow","text":"metadata held within deposits client can used initiate remote deposit specified service deposit_new() method: client now contains additional “hostdata” elements, containing data recorded Zenodo deposit. default print method client now also lists additional information including URL new deposit, unique identifier. R environments, URL can directly clicked view deposit online. new deposits private, can viewed first logging service. Metadata can still edited updated within client modifying “datapackage.json” file. metadata held Zenodo can updated calling deposit_update() method.","code":"cli$deposit_new () #> ID of new deposit : 1065666 print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : <none> #> #>  url_service : https://sandbox.zenodo.org/deposit/1065666 #>   deposit id : 1065666 #>     hostdata : list with 14  elements #>     metadata : 7 terms (see 'metadata' element for details) #>   local_path : /tmp/RtmpMd4uB8/beaver #>    resources : 2 local, 0 remote"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"uploading-files-to-a-remote-deposit","dir":"Articles","previous_headings":"","what":"Uploading files to a remote deposit","title":"Example deposits workflow","text":"main purpose deposits package, online deposition services, deposit data. done deposit_upload_file() method. main parameter, path, can also either single file entire directory. path specifies directory, files contained within directory uploaded. “hostdata” client now indicate three files successfully uploaded.","code":"cli$deposit_upload_file (beaver_dir) #> frictionless metadata file has been generated as '/tmp/RtmpCPOaqC/beaver/beaver1.csv' cli$hostdata$files [, 1:3] #>                           checksum         filename filesize #> 1 c8e7ff1e2e4323198b4be5227ff63864      beaver1.csv     1909 #> 2 c8e7ff1e2e4323198b4be5227ff63864      beaver2.csv     1909 #> 3 4fd4b5167c28a874170ab611daf824e7 datapackage.json     1225"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"file-compression","dir":"Articles","previous_headings":"Uploading files to a remote deposit","what":"File compression","title":"Example deposits workflow","text":"deposit_upload_file() method includes compress parameter defaults \"\" compression, can also set \"tar\" \"zip\" compress files prior uploading. Compression generally recommended large files, ease uploading downloading, reduce storage sizes host services. frictionless “datapackage.json” file always stored uncompressed format, enable direct inspection via online platforms. following code demonstrates effects file compression: frictionless “datapackage.json” files never compressed, ensuring contents can always viewed web interfaces deposits services. (increase sizes uploaded files demonstrates compression often offers little advantage small files. advantages large files can nevertheless considerable, compression generally recommended.) change compression, compress file previously uploaded uncompressed form, file first needs removed deposits service deposit_delete_file() method, re-uploaded either deposit_upload_file() deposit_update().","code":"cli$deposit_upload_file (beaver_dir, compress = \"tar\") #> frictionless metadata file has been generated as '/tmp/RtmpCPOaqC/beaver/beaver1.csv' cli$hostdata$files [, 1:3] #>                           checksum         filename filesize #> 1 03dd72dacab515750494745e17e4f37c   beaver1.tar.gz     3584 #> 2 713ce15cb9d3c2b2b6ba8d541c0934a5   beaver2.tar.gz     3584 #> 3 4fd4b5167c28a874170ab611daf824e7 datapackage.json     1225"},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"editing-and-updating-files","dir":"Articles","previous_headings":"Uploading files to a remote deposit","what":"Editing and updating files","title":"Example deposits workflow","text":"deposit_update() method automatically update files held remote deposits service locally modified. local “datapackage.json” file modified, changes “metadata” section brought local deposits client, also translated service-specific metadata, posted service, returned updated “hostdata” client. remote version file also updated. short, deposit_upload_file() method needed initially upload files (directories). files exist remote deposits service, deposit_update() method can used automatically upload modified files service.","code":""},{"path":"https://docs.ropensci.org/deposits/articles/workflow.html","id":"publishing-a-deposit","dir":"Articles","previous_headings":"","what":"Publishing a deposit","title":"Example deposits workflow","text":"final steps publishing deposit, potentially along embargo date, described main vignette, copied completeness. metadata data satisfactorily edited, updated, uploaded, deposit can made publicly visible permanently associated Digital Object Identifier (DOI) publishing . Prior publishing, often desired apply “embargo” deposit, form date deposit become publicly visible. two steps publication thus generally: Calling deposit_publish() method irreversible, can never undone. published deposit permanently associated account user published , identified API token used initiate deposits client. Publication also change many items client’s “hostdata”, notably involving change status visibility “private” “public”. deposit published, associated DOI, equivalent URL given deposits client, may shared permanent link deposit.","code":"cli$deposit_embargo (embargo_date = \"2030-03-30\") cli$deposit_publish ()"},{"path":"https://docs.ropensci.org/deposits/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/deposits/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M (2024). deposits: universal client depositing accessing research data anywhere. R package version 0.2.1.057, https://docs.ropensci.org/deposits/.","code":"@Manual{,   title = {deposits: A universal client for depositing and accessing research data anywhere},   author = {Mark Padgham},   year = {2024},   note = {R package version 0.2.1.057},   url = {https://docs.ropensci.org/deposits/}, }"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"deposits","dir":"","previous_headings":"","what":"A universal client for depositing and accessing research data\n    anywhere","title":"A universal client for depositing and accessing research data\n    anywhere","text":"deposits R package universal client depositing accessing research data variety online deposition services. Currently supported services zenodo figshare. two systems fundamentally different interfaces (“API”s, Application Programming Interfaces), access indeed deposition services traditionally enabled individual software clients. deposits package aims universal client offering access variety deposition services, without users know specific details APIs service. deposits package works seamlessly “frictionless” data workflow, enable unified documentation aspects datasets one place. Instructions installing setting package installation vignette. README gives brief overview package usage, detail introductory vignette. prefer jump straight workflow, also deposits workflow vignette demonstrating full workflow data generation documentation publication.","code":""},{"path":"https://docs.ropensci.org/deposits/index.html","id":"data-repositories","dir":"","previous_headings":"","what":"Data Repositories","title":"A universal client for depositing and accessing research data\n    anywhere","text":"list data repositories currently supported accessible deposits_services() function: zenodo “sandbox” environment offers ideal environment testing functionality package.","code":"library (deposits) deposits_services () ##             name                           docs                    api_base_url ## 1         zenodo https://developers.zenodo.org/         https://zenodo.org/api/ ## 2 zenodo-sandbox https://developers.zenodo.org/ https://sandbox.zenodo.org/api/ ## 3       figshare     https://docs.figshare.com/    https://api.figshare.com/v2/"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"the-frictionless-data-workflow","dir":"","previous_headings":"","what":"The “frictionless” data workflow","title":"A universal client for depositing and accessing research data\n    anywhere","text":"Prior describing deposits workflow, useful understand “frictionless” data workflow, provides standardised way document contents structure data files separate metadata file. deposits package links directly rOpenSci’s frictionless package writing, editing, reading frictionless metadata files. deposits package nevertheless aims make integration seamless painless possible. knowledge frictionless workflow necessary, deposits workflow “just work” many cases, appropriately constructing frictionless metadata files uploading deposits services. course also possible use deposits package without frictionless metadata.","code":""},{"path":"https://docs.ropensci.org/deposits/index.html","id":"the-deposits-workflow","dir":"","previous_headings":"","what":"The deposits workflow","title":"A universal client for depositing and accessing research data\n    anywhere","text":"now provide brief overview deposits workflow. complete description given main package vignette, demonstrated step--step workflow vignette. deposits package uses R6 package create depositsClient used call methods needed deposits workflow. separate vignette describes R6 system unfamiliar . typical deposits workflow, associated methods, involves following steps: Create new deposits client Fill client metadata, either part Step 1 using new() method, afterward using deposit_fill_metadata() method; Create new deposit nominated service using deposit_new() method; Upload files deposit using deposit_upload_file() method. following sections describe steps detail.","code":""},{"path":"https://docs.ropensci.org/deposits/index.html","id":"step-1-create-a-new-client","dir":"","previous_headings":"The deposits workflow","what":"Step 1: Create a new client","title":"A universal client for depositing and accessing research data\n    anywhere","text":"deposits operations start client constructed new() function: upper section information shown calling print (cli) print client describes general information, aspects specified service, profile user (identified locally-stored token, described “Installation Setup” vignette). lower section contains information current deposit held within client. new client initially contains information deposit, lower sections empty. code demonstrates R6 objects work, calling “methods” functions main “object” via $ symbol. “new” method must called depositsClient object. point , methods called object . example, following calls lists methods implemented client: methods listed cli$deposits_methods() work similarly, calling cli$<method>(<parameters>). Note R6 functions called directly client, object (cli) updated call. example, deposit_fill_metadata() method described can used specify metadata deposit. works simply calling, cli object updated call, without needing assigned return value (need use cli <- cli$<method>).","code":"cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : <none> #> #>    hostdata : <none> #>    metadata : <none> cli$deposits_methods () #> List of methods for a deposits client: #> #>    - deposit_add_resource #>    - deposit_delete #>    - deposit_delete_file #>    - deposit_download_file #>    - deposit_embargo #>    - deposit_fill_metadata #>    - deposit_new #>    - deposit_prereserve_doi #>    - deposit_publish #>    - deposit_retrieve #>    - deposit_service #>    - deposit_update #>    - deposit_upload_file #>    - deposit_version #>    - deposits_list #>    - deposits_methods #>    - deposits_search #> #>  see `?depositsClient` for full details of all methods. cli$deposit_fill_metadata (metadata)"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"step-2-fill-client-with-metadata","dir":"","previous_headings":"The deposits workflow","what":"Step 2: Fill client with metadata","title":"A universal client for depositing and accessing research data\n    anywhere","text":"metadata deposit describe nature properties data deposited. deposit first created uploading metadata deposits service; can actual data uploaded associated deposit described metadata. deposits package works two main types metadata: Metadata describe deposit associated properties, author names affiliations, deposit titles descriptions, dates, keywords, links deposits publications, many terms. Frictionless metadata describe actual contents data deposited. kinds metadata (optionally) generated (always) handled frictionless package. (Note actually three main types metadata, described introductory vignette, third may generally ignored, intended “read-” metadata provided host services.) explained outset, deposits package can used without knowing understanding anything frictionless package frictionless workflows. present section therefore concerns first two kinds metadata, referred throughout package documentation “metadata”. Brief demonstrations also given second kind, illustrate frictionless workflow integrates general deposits workflow. kinds metadata always referred “frictionless metadata.” separate vignette describes detail specify include metadata deposits client. section briefly demonstrates process. example deposits metadata : “creator” field list--lists, allow individual creator entries multiple fields addition “name”. data can used construction new client passing metadata argument: “metadata” component client now holds 3 terms. Equivalently, metadata can added existing client deposit_fill_metadata() function: stage, metadata associated local client. following section describes use metadata initiate deposit external service.","code":"metadata <- list (     title = \"New Title\",     abstract = \"This is the abstract\",     creator = list (list (name = \"A. Person\"), list (name = \"B. Person\")) ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : <none> #> #>    hostdata : <none> #>    metadata : 3 terms (see 'metadata' element for details) cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) cli$deposit_fill_metadata (metadata)"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"step-3-create-a-new-deposit","dir":"","previous_headings":"The deposits workflow","what":"Step 3: Create a new deposit","title":"A universal client for depositing and accessing research data\n    anywhere","text":"metadata filled steps can used initiate new deposit associated server using deposit_new() method. client now includes several additional elements, notably “deposit id” (stored cli$id) giving unique identifier new deposit, “hostdata” item , case, 14 elements specified host service. url_service URL newly-created deposit. (Viewing web browser require logging private sandbox deposits). “metadata” item also includes additional “identifier” element containing pre-reserved DOI provided deposits service.","code":"cli$deposit_new () #> ID of new deposit : 1065666 print (cli) #> <deposits client> #>  deposits service : zenodo #>            sandbox: TRUE #>          url_base : https://sandbox.zenodo.org/api/ #>  Current deposits : <none> #> #>  url_service : https://sandbox.zenodo.org/deposit/1065666 #>   deposit id : 1065666 #>     hostdata : list with 14  elements #>     metadata : 4 terms (see 'metadata' element for details)"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"step-4-upload-or-download-files","dir":"","previous_headings":"The deposits workflow","what":"Step 4: Upload (or download) files","title":"A universal client for depositing and accessing research data\n    anywhere","text":"deposit really data, just metadata. Data can uploaded deposit deposit_upload_file() method: Details files associated deposits stored data.frame stored part “hostdata” deposits client, cli$hostdata$files item. Prior uploading, cli$hostdata$files empty, uploading data.frame including one row item whose “filename” “-data.dat”. deposit_download_file() function reverse: Files default downloaded current working directory, elsewhere specified additional path parameter. (Note method returns full local path downloaded file, unlike methods deposit clients, invisibly return updated version client.)","code":"cli$deposit_upload_file (path = \"<path>/<to>/my-data.dat\") cli$hostdata$files #>                           checksum    filename filesize #> 1 5955bb96a8fee3bc89549bde9ef9b470 my-data.dat      829 #>                                     id #> 1 618ae9b9-af48-4b86-aa37-7b4e767dccb7 #>                                                 links.download #> 1 https://sandbox.zenodo.org/api/files/<file-hash>/my-data.dat #>                                                                links.self #> 1 https://sandbox.zenodo.org/api/deposit/depositions/1065666/files/<hash> cli$deposit_download_file (\"my-data.dat\") #> '/<loca>/<directory>/my-data.dat'"},{"path":"https://docs.ropensci.org/deposits/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A universal client for depositing and accessing research data\n    anywhere","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/deposits/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"A universal client for depositing and accessing research data\n    anywhere","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/dcmi_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of DCMI terms — dcmi_terms","title":"Get names of DCMI terms — dcmi_terms","text":"Dublin Core Metadata Initiative defines set terms https://www.dublincore.org/specifications/dublin-core/dcmi-terms/.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/dcmi_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of DCMI terms — dcmi_terms","text":"","code":"dcmi_terms(term = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/dcmi_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of DCMI terms — dcmi_terms","text":"term specified, match term official DCMI nomenclature, return single match.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/dcmi_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of DCMI terms — dcmi_terms","text":"character vector DCMI terms.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/deposits-package.html","id":null,"dir":"Reference","previous_headings":"","what":"deposits: A universal client for depositing and accessing research data anywhere — deposits-package","title":"deposits: A universal client for depositing and accessing research data anywhere — deposits-package","text":"universal client depositing accessing research data anywhere. Currently supported services zenodo figshare.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/deposits-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"deposits: A universal client for depositing and accessing research data anywhere — deposits-package","text":"Maintainer: Mark Padgham mark.padgham@email.com (ORCID)","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":null,"dir":"Reference","previous_headings":"","what":"depositsClient — depositsClient","title":"depositsClient — depositsClient","text":"R6 client managing deposits external services, currently including Figshare Zenodo. Use 'deposits' client controlled methods listed . looking help client usage advised head section.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"depositsClient — depositsClient","text":"depositsClient class (R6 class)","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"depositsClient — depositsClient","text":"method generally intended used private deposits; , edit deposits prior publication. nevertheless possible edit published deposits Zenodo, method called public Zenodo deposit. updated data /metadata publicly visible deposit published deposit_publish() method.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"depositsClient — depositsClient","text":"service (character) deposits host service. sandbox (logical) Connect client sandbox TRUE (zenodo ) deposits (data.frame) Current deposits hosted service, one row per deposit. frictionless (logical) Default behaviour TRUE assumes uploads data files rectangular form, able described frictionless metadata. frictionless integration -passed parameter FALSE. url_base (character) Base URL host service API url_service (character) URL deposit service id (integer) Deposit identifier host service. headers (list) list named headers hostdata (list) Data stored host platform metadata holds list DCMI-compliant metadata. local_path holds path local directory (file) containing current deposit.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"depositsClient — depositsClient","text":"depositsClient$new() depositsClient$print() depositsClient$deposit_add_resource() depositsClient$deposit_delete() depositsClient$deposit_delete_file() depositsClient$deposit_download_file() depositsClient$deposit_embargo() depositsClient$deposit_fill_metadata() depositsClient$deposit_new() depositsClient$deposit_prereserve_doi() depositsClient$deposit_publish() depositsClient$deposit_retrieve() depositsClient$deposit_service() depositsClient$deposit_update() depositsClient$deposit_upload_file() depositsClient$deposit_version() depositsClient$deposits_list() depositsClient$deposits_methods() depositsClient$deposits_search()","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"depositsClient — depositsClient","text":"Create new depositsClient object, R6 client methods listed via deposits_emthods().","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$new(service, metadata = NULL, sandbox = FALSE, headers = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"service (character) Name deposits service (see deposits_services). metadata Either one two possible ways defining metadata: name (full path) local file containing metadata constructed deposits_metadata_template; names list metadata names matching values given dcmi_terms, values specified individual character strings lists multiple entries. sandbox TRUE, connect client sandbox, rather actual API endpoint (\"zenodo\" ). headers acceptable headers. See examples httr2 package.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"new depositsClient object","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"\\dontrun{ cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) # List methods of client: cli$deposits_methods () # List all current deposits associated with user token: cli$deposits_list ()  # Once a deposit has locally-stored metadata associated with it, only # that parameter is needed. path <- tempfile (pattern = \"data\") # A directory for data storage dir.create (path) f <- file.path (path, \"beaver1.csv\") write.csv (datasets::beaver1, f, row.names = FALSE) metadata <- list (     creator = list (list (name = \"P. S. Reynolds\")),     created = list (publisherPublication = \"1994-01-01\"),     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver' dataset.\" ) cli <- depositsClient$new (service = \"figshare\", metadata = metadata) cli$deposit_new () cli$deposit_upload_file (f)  # A new deposits client may then be constructed by passing the data # directory as the 'metadata' parameter: cli <- depositsClient$new (metadata = path) }"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"depositsClient — depositsClient","text":"print method depositsClient class, providing -screen overview current contents structure client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$print(x, ...)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-add-resource-","dir":"Reference","previous_headings":"","what":"Method deposit_add_resource()","title":"depositsClient — depositsClient","text":"Generate local \"datapackage.json\" file, /add metadata client. \"resource\" must readable frictionless package, generally meaning either 'datapackage.json' file, rectangular structure able read represented data.frame. See https://docs.ropensci.org/frictionless/ details.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_add_resource(path)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"path Path local resource added client. May name individual file directory.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-delete-","dir":"Reference","previous_headings":"","what":"Method deposit_delete()","title":"depositsClient — depositsClient","text":"Deleted specified deposit remote service. removes deposits associated service, along corresponding 'hostdata' local client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_delete(deposit_id = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"deposit_id Integer identifier deposit (generally obtained list_deposits method).","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-delete-file-","dir":"Reference","previous_headings":"","what":"Method deposit_delete_file()","title":"depositsClient — depositsClient","text":"Delete single deposits service. modify \"datapackage.json\" file, either locally service.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_delete_file(filename)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"filename Name file deleted recorded service. deposit_id 'id' number deposit file deleted. specified, 'id' value current deposits client used.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"\\dontrun{ # Initiate deposit and fill with metadata: metadata <- list (     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver2' data\",     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     publisher = \"Case Studies in Biometry\" ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) cli$deposit_new ()  # Create some local data and upload to deposit: path <- fs::path (fs::path_temp (), \"beaver.csv\") write.csv (datasets::beaver2, path) cli$deposit_upload_file (path = path)  # Confirm that uploaded files include \\pkg{frictionless} # \"datapackage.json\" file, and also that local version has been # created: cli$hostdata$files  # Then delete one of those files: cli$deposit_delete_file (\"datapackage.json\") }"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-download-file-","dir":"Reference","previous_headings":"","what":"Method deposit_download_file()","title":"depositsClient — depositsClient","text":"Download specified 'filename' deposit.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_download_file(   filename,   deposit_id = NULL,   path = NULL,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"filename name file download specified deposit. deposit_id 'id' number deposit file downloaded . specified, 'id' value current deposits client used. path local directory file downloaded. overwrite overwrite existing files unless set TRUE. quiet FALSE, display download progress.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"full path downloaded file.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-embargo-","dir":"Reference","previous_headings":"","what":"Method deposit_embargo()","title":"depositsClient — depositsClient","text":"Embargo deposit prior publication.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_embargo(   embargo_date = NULL,   embargo_type = c(\"deposit\", \"file\"),   embargo_reason = NULL )"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"embargo_date Date expiry embargo. deposit_publish() method called, deposit automatically published date, published, publicly accessible, prior date. embargo_type Figshare service , allows embargoes entire deposits single files. Ignored services. embargo_reason Figshare service , optional text string describing reasons embargo.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated deposits client additional embargo information.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-fill-metadata-","dir":"Reference","previous_headings":"","what":"Method deposit_fill_metadata()","title":"depositsClient — depositsClient","text":"Fill deposits client metadata.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_fill_metadata(metadata = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"metadata Either one two possible ways defining metadata: name (full path) local file containing metadata constructed deposits_metadata_template; names list metadata names matching values given dcmi_terms, values specified individual character strings lists multiple entries.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated deposits client metadata inserted.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-new-","dir":"Reference","previous_headings":"","what":"Method deposit_new()","title":"depositsClient — depositsClient","text":"Initiate new deposit external deposits service.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_new(prereserve_doi = TRUE, quiet = FALSE)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"prereserve_doi TRUE, Digital Object Identifier (DOI) prereserved nominated service, returned \"hostdata\". DOI also inserted \"identifier\" field client metadata. quiet FALSE (default), print integer identifier newly created deposit.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated deposits client includes data new deposit","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-prereserve-doi-","dir":"Reference","previous_headings":"","what":"Method deposit_prereserve_doi()","title":"depositsClient — depositsClient","text":"Prereserve DOI. generally done deposit first initialised, via prereserve_doi parameter. method exists subsequently prereserve DOI deposits initiated prereserve_doi = FALSE.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_prereserve_doi()"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-publish-","dir":"Reference","previous_headings":"","what":"Method deposit_publish()","title":"depositsClient — depositsClient","text":"Publish deposit. irreversible action called really sure want publish deposit. aspects published deposits can subsequently edited, can never deleted.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_publish()"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-retrieve-","dir":"Reference","previous_headings":"","what":"Method deposit_retrieve()","title":"depositsClient — depositsClient","text":"Retrieve specified deposit store information local client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_retrieve(deposit_id, quiet = FALSE)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"deposit_id 'id' number deposit information retrieved. quiet FALSE (default), display information screen issues encountered retrieving deposit.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-service-","dir":"Reference","previous_headings":"","what":"Method deposit_service()","title":"depositsClient — depositsClient","text":"Switch external services associated depositsClient object.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_service(service = NULL, sandbox = FALSE, headers = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"service (character) Name deposits service (see deposits_services). sandbox TRUE, connect client sandbox, rather actual API endpoint (\"zenodo\" ). headers acceptable headers. See examples httr2 package.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated deposits client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-update-","dir":"Reference","previous_headings":"","what":"Method deposit_update()","title":"depositsClient — depositsClient","text":"Update remote (online) deposit local metadata.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_update(deposit_id = NULL, path = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"deposit_id (Optional) 'id' number deposit update. specified, 'id' value current deposits client used. path (Optional) given path single file, update file remote service. given directory, update files within directory remote service. given, path taken client's \"local_path\" field. files local versions changed uploaded.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated deposits client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-upload-file-","dir":"Reference","previous_headings":"","what":"Method deposit_upload_file()","title":"depositsClient — depositsClient","text":"Upload local file folder specified deposit, update existing version file new local version.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_upload_file(   path = NULL,   deposit_id = NULL,   overwrite = FALSE,   compress = c(\"no\", \"zip\", \"tar\"),   quiet = FALSE )"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"path Either single file name full path local file folder uploaded. single file name, path taken client's \"local_path\" field. file uploaded able read tabular data file, associated frictionless \"datapackage.json\" file also uploaded exists, created . metadata within client also used fill update metadata within \"datapackage.json\" file. deposit_id 'id' number deposit file uploaded . specified, 'id' value current deposits client used. overwrite Set TRUE update existing files overwriting. compress One \"\" (default), \"zip\", \"tar\", latter two compress data chosen binary format prior uploading. files individually compressed; uploading binary archives multiple files recommended, prevents people downloading selections files. quiet FALSE (default), display diagnostic information screen.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"\\dontrun{ # Initiate deposit and fill with metadata: metadata <- list (     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver2' data\",     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     publisher = \"Case Studies in Biometry\" ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) cli$deposit_new ()  # Create some local data and upload to deposit: path <- fs::path (fs::path_temp (), \"beaver.csv\") write.csv (datasets::beaver2, path) cli$deposit_upload_file (path = path)  # Confirm that uploaded files include \\pkg{frictionless} # \"datapackage.json\" file, and also that local version has been # created: cli$hostdata$files fs::dir_ls (fs::path_temp (), regexp = \"datapackage\") }"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposit-version-","dir":"Reference","previous_headings":"","what":"Method deposit_version()","title":"depositsClient — depositsClient","text":"Start new version published deposit, based current client metadata. method available Figshare.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposit_version()"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposits-list-","dir":"Reference","previous_headings":"","what":"Method deposits_list()","title":"depositsClient — depositsClient","text":"Update 'deposits' item current deposits given service. list deposits contained within \"deposits\" item client may --date; method can used force synchronisation external service, \"deposits\" lists current deposits.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposits_list()"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"(Invisibly) Updated 'deposits' client","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"\\dontrun{ cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) print (cli) # ... then if \"Current deposits\" does not seem up-to-date: cli$deposits_list () # That will ensure that all external deposits are then listed, # and can be viewed with: cli$deposits }"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposits-methods-","dir":"Reference","previous_headings":"","what":"Method deposits_methods()","title":"depositsClient — depositsClient","text":"List public methods 'deposits' client.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposits_methods()"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"Nothing; methods listed screen.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"method-deposits-search-","dir":"Reference","previous_headings":"","what":"Method deposits_search()","title":"depositsClient — depositsClient","text":"Search public deposits.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"depositsClient — depositsClient","text":"","code":"depositsClient$deposits_search(   search_string = NULL,   page_size = 10L,   page_number = 1L,   ... )"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"depositsClient — depositsClient","text":"search_string Single string search page_size Number records return one page page_number Starting page return results; used combination 'page_size' pagination. ... Named pairs query parameters. Zenodo parameters described https://developers.zenodo.org/#list36, currently include: status: either \"draft\" \"published\" sort: either \"bestmatch\" (default) \"mostrecent\" all_versions: Either \"true\" \"false\" communities: Search deposits within specified communities type: Return deposits specified type subtype: Return deposits specified subtype bound: geolocation bounding box custom: Custom keywords Figshare parameters described https://docs.figshare.com/#articles_search, currently include: resource_doi: return deposits matching 'resource_doi' item_type: Return deopsits specified type (integer). doi: return deposits matching DOI handle: return deposits matching handle project_id: return deposits within specified project order: Order sorting results; one \"published_date\", \"modified_date\", \"views\", \"shares\", \"downloads\", \"cites\" search_for: Search term. order_direction: \"asc\" \"desc\" institution: return deposits specified institution (integer) group: return deposits specified group (integer) published_since: return deposits published since specified date (YYYY-MM-DD) modified_since: return deposits modified since specified date (YYYY-MM-DD)","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"depositsClient — depositsClient","text":"data.frame data deposits matching search parameters (format depending deposits service.)","code":""},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"\\dontrun{ cli <- depositsClient$new (service = \"figshare\") search_results <- cli$deposits_search (     search_string = \"Text string query\",     page_size = 5L ) # The 'search_string' can be used to specify precise searches: cli <- depositsClient$new (service = \"zenodo\") search_results <-    cli$deposits_search (\"keywords='frictionlessdata'&type='dataset'\") }"},{"path":"https://docs.ropensci.org/deposits/reference/depositsClient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"depositsClient — depositsClient","text":"","code":"if (FALSE) { # make a client cli <- depositsClient$new (\"zenodo\") # or: cli <- depositsClient$new (\"figshare\") print (cli)  # methods cli$deposits_list ()  # Fill depositsClient metadata metadata <- list (     title = \"New Title\",     abstract = \"This is the abstract\",     creator = list (list (name = \"A. Person\"), list (name = \"B. Person\")) ) cli$deposit_fill_metadata (metadata) print (cli)  # or pass metadata directly at construction of new client cli <- depositsClient$new (\"figshare\", metadata = metadata) }  ## ------------------------------------------------ ## Method `depositsClient$new` ## ------------------------------------------------  if (FALSE) { cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) # List methods of client: cli$deposits_methods () # List all current deposits associated with user token: cli$deposits_list ()  # Once a deposit has locally-stored metadata associated with it, only # that parameter is needed. path <- tempfile (pattern = \"data\") # A directory for data storage dir.create (path) f <- file.path (path, \"beaver1.csv\") write.csv (datasets::beaver1, f, row.names = FALSE) metadata <- list (     creator = list (list (name = \"P. S. Reynolds\")),     created = list (publisherPublication = \"1994-01-01\"),     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver' dataset.\" ) cli <- depositsClient$new (service = \"figshare\", metadata = metadata) cli$deposit_new () cli$deposit_upload_file (f)  # A new deposits client may then be constructed by passing the data # directory as the 'metadata' parameter: cli <- depositsClient$new (metadata = path) }  ## ------------------------------------------------ ## Method `depositsClient$deposit_delete_file` ## ------------------------------------------------  if (FALSE) { # Initiate deposit and fill with metadata: metadata <- list (     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver2' data\",     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     publisher = \"Case Studies in Biometry\" ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) cli$deposit_new ()  # Create some local data and upload to deposit: path <- fs::path (fs::path_temp (), \"beaver.csv\") write.csv (datasets::beaver2, path) cli$deposit_upload_file (path = path)  # Confirm that uploaded files include \\pkg{frictionless} # \"datapackage.json\" file, and also that local version has been # created: cli$hostdata$files  # Then delete one of those files: cli$deposit_delete_file (\"datapackage.json\") }  ## ------------------------------------------------ ## Method `depositsClient$deposit_upload_file` ## ------------------------------------------------  if (FALSE) { # Initiate deposit and fill with metadata: metadata <- list (     title = \"Time-series analyses of beaver body temperatures\",     description = \"Original source of 'beaver2' data\",     creator = list (list (name = \"P.S. Reynolds\")),     created = \"1994-01-01T00:00:00\",     publisher = \"Case Studies in Biometry\" ) cli <- depositsClient$new (     service = \"zenodo\",     sandbox = TRUE,     metadata = metadata ) cli$deposit_new ()  # Create some local data and upload to deposit: path <- fs::path (fs::path_temp (), \"beaver.csv\") write.csv (datasets::beaver2, path) cli$deposit_upload_file (path = path)  # Confirm that uploaded files include \\pkg{frictionless} # \"datapackage.json\" file, and also that local version has been # created: cli$hostdata$files fs::dir_ls (fs::path_temp (), regexp = \"datapackage\") }  ## ------------------------------------------------ ## Method `depositsClient$deposits_list` ## ------------------------------------------------  if (FALSE) { cli <- depositsClient$new (service = \"zenodo\", sandbox = TRUE) print (cli) # ... then if \"Current deposits\" does not seem up-to-date: cli$deposits_list () # That will ensure that all external deposits are then listed, # and can be viewed with: cli$deposits }  ## ------------------------------------------------ ## Method `depositsClient$deposits_search` ## ------------------------------------------------  if (FALSE) { cli <- depositsClient$new (service = \"figshare\") search_results <- cli$deposits_search (     search_string = \"Text string query\",     page_size = 5L ) # The 'search_string' can be used to specify precise searches: cli <- depositsClient$new (service = \"zenodo\") search_results <-    cli$deposits_search (\"keywords='frictionlessdata'&type='dataset'\") }"},{"path":"https://docs.ropensci.org/deposits/reference/deposits_metadata_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an empty metadata template to local file — deposits_metadata_template","title":"Write an empty metadata template to local file — deposits_metadata_template","text":"fields defined Dublin Core Metadata Initiative (DCMI), defined https://www.dublincore.org/specifications/dublin-core/dcmi-terms/. template produced function json format can manually edited provide metadata deposit.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/deposits_metadata_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an empty metadata template to local file — deposits_metadata_template","text":"","code":"deposits_metadata_template(filename = NULL)"},{"path":"https://docs.ropensci.org/deposits/reference/deposits_metadata_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an empty metadata template to local file — deposits_metadata_template","text":"filename Name full path local file template written. file created. file name already exists, must first deleted. file extension '.json' automatically appended.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/deposits_metadata_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an empty metadata template to local file — deposits_metadata_template","text":"(Invisibly) TRUE local file successfully created; otherwise FALSE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/deposits_metadata_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an empty metadata template to local file — deposits_metadata_template","text":"","code":"filename <- tempfile (fileext = \".json\") deposits_metadata_template (filename) #> Edit the file [/tmp/Rtmpf5ck00/file52f38ee4de2.json] and remove everything except the metadata fields you require. #> The filename may be then passed as the 'metadata' argument to a 'deposits' client. # then edit that file to complete metadata"},{"path":"https://docs.ropensci.org/deposits/reference/deposits_services.html","id":null,"dir":"Reference","previous_headings":"","what":"List all deposits services and associated URLs — deposits_services","title":"List all deposits services and associated URLs — deposits_services","text":"List deposits services associated URLs","code":""},{"path":"https://docs.ropensci.org/deposits/reference/deposits_services.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all deposits services and associated URLs — deposits_services","text":"","code":"deposits_services()"},{"path":"https://docs.ropensci.org/deposits/reference/deposits_services.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all deposits services and associated URLs — deposits_services","text":"data.frame name url values accessible service.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/deposits_services.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all deposits services and associated URLs — deposits_services","text":"","code":"s <- deposits_services ()"},{"path":"https://docs.ropensci.org/deposits/reference/figshare_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Select figshare categories and return corresponding integer identifier. — figshare_categories","title":"Select figshare categories and return corresponding integer identifier. — figshare_categories","text":"identifiers added deposit metadata , example, subject(categories=c(1,2)).","code":""},{"path":"https://docs.ropensci.org/deposits/reference/figshare_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select figshare categories and return corresponding integer identifier. — figshare_categories","text":"","code":"figshare_categories()"},{"path":[]},{"path":"https://docs.ropensci.org/deposits/reference/get_deposits_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a token for a specified deposits service. — get_deposits_token","title":"Retrieve a token for a specified deposits service. — get_deposits_token","text":"Tokens stored local environment variables, optionally defined ~/.Renviron file, contain name desired deposits service.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/get_deposits_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a token for a specified deposits service. — get_deposits_token","text":"","code":"get_deposits_token(service = NULL, sandbox = FALSE)"},{"path":"https://docs.ropensci.org/deposits/reference/get_deposits_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a token for a specified deposits service. — get_deposits_token","text":"service Name desired service; must value \"name\" column deposits_services. sandbox TRUE, retrieve token sandbox, rather actual API.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/get_deposits_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a token for a specified deposits service. — get_deposits_token","text":"API token nominated service.","code":""},{"path":"https://docs.ropensci.org/deposits/reference/get_deposits_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a token for a specified deposits service. — get_deposits_token","text":"","code":"if (FALSE) { token <- get_deposits_token (service = \"figshare\") }"}]
